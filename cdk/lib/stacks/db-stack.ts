import { RemovalPolicy, Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { AttributeType, Billing, Capacity, TableClass, TableV2 } from 'aws-cdk-lib/aws-dynamodb';

interface DbStackProps extends StackProps {
}

export class DbStack extends Stack {

  public readonly ddbTable: TableV2;

  constructor(scope: Construct, id: string, props: DbStackProps) {
    super(scope, id, props);

    this.ddbTable = new TableV2(this, 'DemoTable', {
      partitionKey: { name: 'pk', type: AttributeType.STRING },
      removalPolicy: RemovalPolicy.DESTROY,
      // tableName: 'test-table-name' // Default: Generated by CFN
      tableClass: TableClass.STANDARD_INFREQUENT_ACCESS, // Slower + cheaper
      billing: Billing.provisioned({
        readCapacity: Capacity.fixed(1),
        writeCapacity: Capacity.autoscaled({ maxCapacity: 1 }),
      }),
    });
  }
}
